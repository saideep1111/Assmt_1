# -*- coding: utf-8 -*-
"""Student Performance Analysis (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BuLR0g0AHWIkCK4H2ZLc9RajQSlwTZdY
"""

import pandas as pd

# loading clean data for analysis

# creating new column Percentage from all available three sciores and creating grade from avg scores

df = pd.read_csv('StudentsPerformance.csv')

print(df.to_string())

df["Percentage"]=(df["math score"]+df["reading score"]+df["writing score"])/3
print(df["Percentage"])

df['Percentage'] = (df['math score']+df['reading score']+df['writing score'])/3
print(df["Percentage"])


def Grade(Percentage):
    if (Percentage >= 95):return 'O'
    if (Percentage >= 81):return 'A'
    if (Percentage >= 71):return 'B'
    if (Percentage >= 61):return 'C'
    if (Percentage >= 51):return 'D'
    if (Percentage >= 41):return 'E'
    else: return 'F'

df["grade"] = df.apply(lambda x : Grade(x["Percentage"]),axis=1)

print(df)

# using Seaborn for analysis

import seaborn as sns
import numpy as np

sns.barplot(x ='gender', y ='Percentage', data = df,
            palette ='pastel', estimator = np.std)

df['gender'].value_counts()

import matplotlib.pyplot as plt

# Count the occurrences of each gender
gender_counts = df['gender'].value_counts()

# Create a horizontal bar plot
plt.figure(figsize=(8,6))
ax = gender_counts.plot(kind='barh', color=['pink', 'skyblue'])

# Set title and labels
plt.title('Gender Distribution')
plt.xlabel('Count')
plt.ylabel('Gender')

# Add data labels
for index, value in enumerate(gender_counts):
    plt.text(value, index, str(value))

# Save the plot as a PNG file
plt.savefig("Gender_Distribution_HorizontalBarPlot.png")

plt.show()

# Below countplot illustares the grade secured by female and male

# Count the occurrences of each grade by gender
grade_gender_counts = df.groupby(['grade', 'gender']).size().unstack()

# Create a stacked bar plot
plt.figure(figsize=(10, 6))
ax = grade_gender_counts.plot(kind='bar', stacked=True, color=['orange', 'blue'])

# Set title and labels
plt.title('Grade Distribution by Gender')
plt.xlabel('Grade')
plt.ylabel('Count')
plt.xticks(rotation=0)  # Rotate x labels for better readability

# Save the plot as a PNG file
plt.savefig("Grade_Distribution_StackedBarPlot.png")

plt.show()

# Below countplot illustrates the grades secured by students grouped by ethinicity

ax = sns.countplot(y="grade", hue="race/ethnicity", data=df, order=["O","A","B","C","D","E","F"])
fig=ax.get_figure()
fig.savefig("Grade_Analysis_race.png")

# below countplot illustates the gardes secured by stuidents and their parenta; level of

# Map grades to numerical values for better plotting
grade_mapping = {'O': 1, 'A': 2, 'B': 3, 'C': 4, 'D': 5, 'E': 6, 'F': 7}
df['grade_num'] = df['grade'].map(grade_mapping)

# Calculate the average grade for each parental level of education
average_grades = df.groupby('parental level of education')['grade_num'].mean().reset_index()

# Create a line plot
plt.figure(figsize=(10, 6))
sns.lineplot(x='parental level of education', y='grade_num', data=average_grades, marker='o')

# Set title and labels
plt.title('Average Grade by Parental Level of Education')
plt.xlabel('Parental Level of Education')
plt.ylabel('Average Grade (Mapped to Numeric Values)')

# Save the plot as a PNG file
plt.savefig("Grade_Analysis_LinePlot.png")

plt.show()

# below countplot illustrates the grade secured by students grouped by their lunch. It shows how lunch
#effects teh student poerformance.

# Calculate the counts of each lunch type overall
lunch_counts = df['lunch'].value_counts()

# Create the pie chart
plt.figure(figsize=(8, 8))
plt.pie(lunch_counts, labels=lunch_counts.index, explode=[0.1]*len(lunch_counts),
        autopct='%1.2f%%', startangle=90, colors=['lightcoral', 'lightskyblue'])

plt.title('Overall Distribution of Lunch Types')

# Save the plot as a PNG file
plt.savefig("Overall_Lunch_Distribution.png")

plt.show()

# Below count plot illustrates hoe course completion effects the student grade

ax = sns.countplot(y="grade", hue="test preparation course", data=df, order=["O","A","B","C","D","E","F"])
fig=ax.get_figure()
fig.savefig("C:/Users/Likhita/OneDrive/Documents/Grade_Analysis_test_prepartion.png")

# below plot illustrates the distibution of avg marks or percentage of score secured by all students.
#we can see more students scored percentage between 50 to 80

ax=sns.distplot(df['Percentage'], kde = False, color ='orange', bins = 30)
fig=ax.get_figure()
fig.savefig("Distribution_percentage.png")

# below scatter plot illustrates how the relation between avg score and math score and grouped by gender

# Create a joint plot with KDE contours and different colors for gender
ax = sns.jointplot(x='Percentage', y='math score', hue='gender', data=df,
                   palette='Set2', kind='kde', fill=True, height=8)

# Set titles and labels
ax.fig.suptitle('Joint Plot of Percentage vs Math Score by Gender with KDE Contours', y=1.02)
ax.set_axis_labels('Percentage', 'Math Score')

# Save the plot as a PNG file
plt.savefig("JointPlot_KDE_Percentage_MathScore.png")

plt.show()

# Create a joint plot with scatter and KDE contours, colored by gender
ax = sns.jointplot(x='Percentage', y='reading score', data=df,
                   kind='scatter', hue='gender',
                   palette='Set1', height=8)

# Add KDE contours
sns.kdeplot(data=df, x='Percentage', y='reading score',
            fill=True, thresh=0, levels=10, color='gray', alpha=0.5)

# Set titles and labels
ax.fig.suptitle('Joint Plot of Percentage vs Reading Score by Gender with KDE Contours', y=1.02)
ax.set_axis_labels('Percentage', 'Reading Score')

# Save the plot as a PNG file
plt.savefig("JointPlot_Scatter_KDE_Percentage_ReadingScore.png")

plt.show()

ax=sns.jointplot(x ='Percentage', y ='writing score',hue="gender", data = df)

